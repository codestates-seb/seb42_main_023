name: React CI with npm

on:
  push:
    branches: ["fe-dev"]
  pull_request:
    branches: ["fe-dev"]

# 리전, 버킷 이름
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Node v 확인
      - name: Check Node v
        run: node -v

      # 의존 파일 설치
      - name: Install Dependencies
        run: |
          npm install buffer --force
          npm install @types/react-html-parser --force
          npm install -save react-html-parser --force
          npm install  @types/lodash --force 
          npm install lodash --force
          npm install @types/js-cookie --force
          npm install js-cookie
          

        working-directory: ./client

        # .env 파일 생성
      - name: Create .env
        run: |
          touch .env
          echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}" >> .env
          cat .env

        working-directory: ./client

      # React Build
      - name: Build
        run: npm run build
        working-directory: ./client
        env:
          CI: ""

      # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
          aws-region: ${{ secrets.AWS_REGION }}

      # 빌드 결과물을 S3 버킷에 업로드(동기화)#
      - name: Sync Bucket
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 sync build s3://${{ secrets.S3_BUCKET_NAME_FRONT }} --delete
        working-directory: ./client/
