# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "be-dev" ]
#  pull_request:
#    branches: [ "main" ]

# 환경변수 정의 
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: hp5234-dragonmoney
  S3_SERVER_PROJECT_FILE_NAME: practice-be-deploy.zip
  CODE_DEPLOY_APPLICATION_NAME: dragonmoney-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: dragonmoney-codedeploy-deployment-group

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    # JDK 설처 
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    ## create properties file
    - name: make application-local.yml
      if: contains(github.ref, 'be-dev') # branch 가 be-dev 인 경우
      run: |
        # spring의 resources 경로로 이동
        cd ./server/src/main/resources 
        
        # application-dev.properties 파일 생성
        touch ./application-local.yml 
        
        # GitHub-Actions 에서 설정한 값으로 값 지정
        echo "${{ secrets.APPLICATION_LOCAL }}" > ./application-local.yml
      shell: bash

    # 서버 빌드 수행
    - name: Build with Gradle
      run: cd server && ./gradlew build
    
    # build 한 후 프로젝트를 압축
    - name: Make zip file
      run: zip -r ./$S3_SERVER_PROJECT_FILE_NAME server/build/libs/*.jar
      shell: bash
    
    # Access Ke y와 Secret Access Key 를 통해 권한을 확인합니다.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-region: ${{ env.AWS_REGION }}
      
    # 빌드 결과물을 S3 버킷에 업로드
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$S3_SERVER_PROJECT_FILE_NAME \
          --source .

    # S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$S3_SERVER_PROJECT_FILE_NAME,bundleType=zip
